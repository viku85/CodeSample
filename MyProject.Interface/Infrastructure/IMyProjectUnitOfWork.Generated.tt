<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ include file="../../T4Plugin/VisualStudioAutomationHelper.ttinclude" #>
<#@ include file="../../T4Plugin/MultiOutput.ttinclude" #>
<#
    var modelProjectNamespace = "MyProject.Model";
    var modelNamespace = "MyProject.Model.DataModel";
    var modelNamespaceReplace = "MyProject.Interface.Repository";

    CodeGenerationTools code = new CodeGenerationTools(this);
	
    var codeDom = CodeDomProvider.CreateProvider("C#");
	
    var modelProject = VisualStudioHelper.GetProject(modelProjectNamespace);
    var allModelClasses = VisualStudioHelper.GetAllCodeElementsOfType(modelProject.CodeModel.CodeElements, EnvDTE.vsCMElement.vsCMElementClass, false);

    var types = (from modelClass in allModelClasses.OfType<CodeClass2>()
            where modelClass.FullName.StartsWith(modelNamespace) && 
                !modelClass.FullName.EndsWith("MetadataSource")
            select modelClass
        ).OrderBy(clas=>clas.FullName);
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template and will be re-created if deleted
//	   with default implementation.
// </auto-generated>
//------------------------------------------------------------------------------
namespace <#=        code.VsNamespaceSuggestion()#>
{

    /// <summary>
    /// MyProject implementation of Unit of Work
    /// </summary>
	public partial interface IMyProjectUnitOfWork
		: IUnitOfWork
	{
					<#
			foreach (CodeClass2 modelClass in allModelClasses
                .OfType<CodeClass2>().Where(clas=>clas.FullName.StartsWith(modelNamespace) && 
                !clas.FullName.EndsWith("MetadataSource")
                ).OrderBy(clas=>clas.FullName))
			{    
        var nameSpace = modelClass.Namespace.Name.Replace(modelNamespace,modelNamespaceReplace);
			#>

		/// <summary>
		/// Gets the <#= modelClass.Name #>Repository repository.
		/// </summary>
		/// <value>
		/// The <#= modelClass.Name #>Repository repository.
		/// </value>
        <#=nameSpace#>.I<#= modelClass.Name #>Repository <#= modelClass.Name #>Repository { get; }
			<#
		}#>	
    }
}