<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ include file="../../T4Plugin/VisualStudioAutomationHelper.ttinclude" #>
<#
    var projectNamespace = "MyProject.Model";
	var modelNamespace = "MyProject.Model.DataModel";
    var modelNamespaceReplace = "MyProject.Interface.Repository";
    var repositoryNameSpace = "MyProject.DB.Repository";

	CodeGenerationTools code = new CodeGenerationTools(this);
	
	var codeDom = CodeDomProvider.CreateProvider("C#");

    var modelProject = VisualStudioHelper.GetProject(projectNamespace);
    var allModelClasses = VisualStudioHelper.GetAllCodeElementsOfType(modelProject.CodeModel.CodeElements, EnvDTE.vsCMElement.vsCMElementClass, true);

	var types = (from modelClass in allModelClasses.OfType<CodeClass2>()
                where modelClass.FullName.StartsWith(modelNamespace)
                select modelClass
                ).OrderBy(clas=>clas.FullName);
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template and will be re-created if deleted
//	   with default implementation.
// </auto-generated>
//------------------------------------------------------------------------------

<#
foreach (var type in types)
{
	var nameSpace = type.Namespace.FullName.Replace(modelNamespace, repositoryNameSpace);
	var interfaceNameSpace = type.Namespace.FullName.Replace(modelNamespace, modelNamespaceReplace);

	var name = type.Name + "Repository";
	var fullName = nameSpace + "." + name;
#>
using Microsoft.EntityFrameworkCore;
using MyProject.DB.Infrastructure;
namespace <#= nameSpace #>
{
    /// <summary>
    /// Interface for interacting with <see cref="<#= type.FullName #>Repository"/>
    /// </summary>
	public partial class <#= type.Name #>Repository
		: Repository<<#= type.FullName #>, MyProjectContext>,
		 <#= interfaceNameSpace #>.I<#=name#>
	{
        /// <summary>
        /// Initializes a new instance of the <see cref="<#= name #>"/> class.
        /// </summary>
        /// <param name="dbContext">The database context.</param>
        public <#=name#>(MyProjectContext dbContext)
            : base(dbContext)
        {
        }
	}
}
<#
}#>
