<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ import namespace="EnvDTE80" #>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ include file="../../T4Plugin/VisualStudioAutomationHelper.ttinclude" #><#
    var modelProjectNamespace = "MyProject.Model";
    var modelNamespace = "MyProject.Model.DataModel";
    var modelNamespaceReplace = "MyProject.Interface.Repository";
    var repositoryNamespace = "MyProject.DB.Repository";

    CodeGenerationTools code = new CodeGenerationTools(this);
	
    var codeDom = CodeDomProvider.CreateProvider("C#");
	
    var modelProject = VisualStudioHelper.GetProject(modelProjectNamespace);
    var allModelClasses = VisualStudioHelper.GetAllCodeElementsOfType(modelProject.CodeModel.CodeElements, EnvDTE.vsCMElement.vsCMElementClass, true);

    var types = (from modelClass in allModelClasses.OfType<CodeClass2>()
            where modelClass.FullName.StartsWith(modelNamespace)
            select modelClass
        ).OrderBy(clas=>clas.FullName);
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template and will be re-created if deleted
//	   with default implementation.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using MyProject.Interface.Infrastructure;
using Microsoft.Extensions.DependencyInjection;
using System.Diagnostics;
namespace <#=        code.VsNamespaceSuggestion()#>
{

    /// <summary>
    /// MyProject implementation of Unit of Work
    /// </summary>
	public sealed partial class MyProjectUnitOfWork
		: IMyProjectUnitOfWork
	{
        /// <summary>
        /// The service provider
        /// </summary>
        private readonly IServiceProvider ServiceProvider;

        /// <summary>
        /// Initializes a new instance of the <see cref="MyProjectUnitOfWork"/> class.
        /// </summary>
        /// <param name="dbContext">The database context.</param>
        /// <param name="serviceProvider">The service provider.</param>
        public MyProjectUnitOfWork(MyProjectContext dbContext, IServiceProvider serviceProvider)
            : base(dbContext)
        {
            ServiceProvider = serviceProvider;
        }
<#
    foreach (var type in types)
    {
        var nameSpace = type.Namespace.FullName.Replace(modelNamespace,repositoryNamespace);
        var interfaceNameSpace = type.Namespace.FullName.Replace(modelNamespace,modelNamespaceReplace);

        var name = type.Name + "Repository";
        var fullName = nameSpace + "." + name;

		var interfaceFullName = $"{interfaceNameSpace}.I{type.Name}Repository";#>

        /// <summary>
        /// Gets the <#=            type.Name #>Repository repository.
        /// </summary>
        /// <value>
        /// The <#=            type.Name #>Repository repository.
        /// </value>
        <#=interfaceFullName#> IMyProjectUnitOfWork.<#=            type.Name #>Repository 
        { 
			[DebuggerStepThrough]
	        get
	        {
				return ServiceProvider.GetService<<#=            interfaceFullName #>>();
	        }
        }
	<#}
	#>}
}