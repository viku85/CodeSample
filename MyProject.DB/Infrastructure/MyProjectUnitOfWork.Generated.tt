<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ include file="../../T4Plugin/VisualStudioAutomationHelper.ttinclude" #>
<#@ include file="../../T4Plugin/MultiOutput.ttinclude" #>
<#
    var modelProjectNamespace = "MyProject.Model";
    var modelNamespace = "MyProject.Model.DataModel";
    var modelNamespaceReplace = "MyProject.Interface.Repository";
    var repositoryNamespace = "MyProject.DB.Repository";

    CodeGenerationTools code = new CodeGenerationTools(this);
	
    var codeDom = CodeDomProvider.CreateProvider("C#");
	
    var modelProject = VisualStudioHelper.GetProject(modelProjectNamespace);
    var allModelClasses = VisualStudioHelper.GetAllCodeElementsOfType(modelProject.CodeModel.CodeElements, EnvDTE.vsCMElement.vsCMElementClass, false);

    var types = (from modelClass in allModelClasses.OfType<CodeClass2>()
            where modelClass.FullName.StartsWith(modelNamespace) && 
                !modelClass.FullName.EndsWith("MetadataSource")
            select modelClass
        ).OrderBy(clas=>clas.FullName);
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template and will be re-created if deleted
//	   with default implementation.
// </auto-generated>
//------------------------------------------------------------------------------
using MyProject.Interface.Infrastructure;
using System.Data.Entity;
namespace <#=        code.VsNamespaceSuggestion()#>
{

    /// <summary>
    /// MyProject implementation of Unit of Work
    /// </summary>
	public sealed partial class MyProjectUnitOfWork
		: UnitOfWork<DbContext>, IMyProjectUnitOfWork
	{
					<#
    foreach (var type in types)
    {
        var nameSpace = type.Namespace.Name.Replace(modelNamespace,repositoryNamespace);
        var interfaceNameSpace = type.Namespace.Name.Replace(modelNamespace,modelNamespaceReplace);

        var name = type.Name + "Repository";
        var fullName = nameSpace + "." + name;
			#>

		/// <summary>
		/// <#=            name #> holder
		/// </summary>
        private <#=            fullName #> _<#=            code.CamelCase(name) #>;

        /// <summary>
        /// Gets the <#=            type.Name #>Repository repository.
        /// </summary>
        /// <value>
        /// The <#=            type.Name #>Repository repository.
        /// </value>
        <#=            interfaceNameSpace#>.I<#=            type.Name #>Repository IMyProjectUnitOfWork.<#=            type.Name #>Repository 
        { 
	        get
	        {
			        return _<#=            code.CamelCase(name) #> = 
			        _<#=            code.CamelCase(name) #> ?? new <#=            fullName #>(Context);
	        }
        }
			<#
    }#>
}

}