<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ include file="../../../T4Plugin/VisualStudioAutomationHelper.ttinclude" #>
<#@ include file="../../../T4Plugin/MultiOutput.ttinclude" #>
<#
    var modelProjectNamespace = "MyProject.Model";
    var modelNamespace = "MyProject.Model.DataModel";
    var modelNamespaceReplace = "MyProject.Interface.Repository";
    var repositoryNamespace = "MyProject.DB.Repository";

    CodeGenerationTools code = new CodeGenerationTools(this);
	
    var codeDom = CodeDomProvider.CreateProvider("C#");
	
    var modelProject = VisualStudioHelper.GetProject(modelProjectNamespace);
    var allModelClasses = VisualStudioHelper.GetAllCodeElementsOfType(modelProject.CodeModel.CodeElements, EnvDTE.vsCMElement.vsCMElementClass, true);

    var types = (from modelClass in allModelClasses.OfType<CodeClass2>()
            where modelClass.FullName.StartsWith(modelNamespace)
            select modelClass
        ).OrderBy(clas=>clas.FullName);
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template and will be re-created if deleted
//	   with default implementation.
// </auto-generated>
//------------------------------------------------------------------------------
using Microsoft.Extensions.DependencyInjection;
namespace <#=        code.VsNamespaceSuggestion()#>
{

    /// <summary>
    /// Registration of repository with Dependency Injection.
    /// </summary>
	public static class ExtensionUnitOfWorkService
	{
        /// <summary>
        /// Registers the repositories.
        /// </summary>
        /// <param name="service">The service collection.</param>
		public static void RegisterRepositories(this IServiceCollection service)
		{
<#
    foreach (var type in types)
    {
        var nameSpace = type.Namespace.FullName.Replace(modelNamespace,repositoryNamespace);
        var interfaceNameSpace = type.Namespace.FullName.Replace(modelNamespace,modelNamespaceReplace);

        var name = type.Name + "Repository";
        var fullName = nameSpace + "." + name;

		var interfaceFullName = $"{interfaceNameSpace}.I{type.Name}Repository";
		#>			service.AddScoped<<#= interfaceFullName #>, <#= fullName #>>();
<#
    }#>		}
	}
}